DROP DATABASE IF EXISTS chat_app;
DROP DATABASE IF EXISTS ProductEase;

CREATE DATABASE ProductEase;

USE ProductEase;

-- usuarios do sistema 
CREATE TABLE usuario (
    id INT AUTO_INCREMENT PRIMARY KEY,
    google_id VARCHAR(255) NOT NULL,
    email VARCHAR(255) NOT NULL UNIQUE,
    RA VARCHAR(255) NOT NULL,
    name VARCHAR(255),
    cpf VARCHAR(255),
    senha varchar(255),
    profile_picture VARCHAR(255) DEFAULT '../../../assets/imagens/sem-foto.png',
    funcao Varchar(40),
    pl TINYINT(1) DEFAULT true -- pl = primeiro login --  
);

-- fim dos usuarios

-- Bater Ponto

CREATE TABLE bater_ponto (
    id INT AUTO_INCREMENT PRIMARY KEY,
    id_funcionario INT,
    ini_ponto TIME,
    fim_ponto TIME,
    data DATE,
    horas_trabalhadas TIME,
    saldo_horas DECIMAL(10, 2),
    banco_de_horas TIME,
    FOREIGN KEY (id_funcionario) REFERENCES usuario(id)
);

-- fim bater ponto

-- Faq

CREATE TABLE faq (
    id INT AUTO_INCREMENT PRIMARY KEY,
    name Varchar(120),
    comentario Varchar(300),
    avaliacao INT
);

-- fim do faq

CREATE TABLE material (
id int AUTO_INCREMENT PRIMARY KEY,
nome Varchar(120),
caminho Varchar(120),
caminho2 Varchar(120)
);

CREATE TABLE tinta (
id int AUTO_INCREMENT PRIMARY KEY,
nome Varchar(120),
caminho Varchar(120)
);

CREATE TABLE tipo_tinta (
id int AUTO_INCREMENT PRIMARY KEY,
nome Varchar(120)
);

CREATE TABLE adesivo (
id int AUTO_INCREMENT PRIMARY KEY,
nome Varchar(120),
caminho Varchar(120)
);

CREATE TABLE solado (
id int AUTO_INCREMENT PRIMARY KEY,
nome Varchar(120)
);

CREATE TABLE cadarco (
id int AUTO_INCREMENT PRIMARY KEY,
nome Varchar(120)
);

CREATE TABLE calcado (
id int AUTO_INCREMENT PRIMARY KEY,
nome VARCHAR(120),
espe_linha Varchar(30),
espacamento_da_costura VARCHAR(30),
temp_equi Varchar(30),
tam_costura Varchar(30),
temp_sec Varchar(30),
reg_equip Varchar(30),
img_calcado VARCHAR(300),
cor_solado VARCHAR(20),
cor_logo_solado VARCHAR(20),
cadarco VARCHAR(20),
cor_malha VARCHAR(20),
cor_lingua VARCHAR(20),
cor_linha VARCHAR(20),
cor_linha_lingua VARCHAR(20),
cor_couro VARCHAR(20),
cor_logo VARCHAR(20),
cor_espuma_interna VARCHAR(20),
cor_etiqueta VARCHAR(20),
cor_bagulho_cardaco VARCHAR(20),
id_tinta int,
id_material int,
id_cadarco int,
id_solado int,
id_adesivo int,
id_tip_tinta int,
data date,
FOREIGN KEY(id_tinta) REFERENCES tinta (id),
FOREIGN KEY(id_material) REFERENCES material (id),
FOREIGN KEY(id_adesivo) REFERENCES adesivo (id),
FOREIGN KEY(id_tip_tinta) REFERENCES tipo_tinta (id),
FOREIGN KEY(id_cadarco) REFERENCES cadarco (id),
FOREIGN KEY(id_solado) REFERENCES solado (id)
);

CREATE TABLE controle (
    id INT AUTO_INCREMENT PRIMARY KEY,
    data date DEFAULT curdate(),
    id_user int,
    id_calcado int,
    conc0OrErro1 TINYINT(1) DEFAULT false,
    FOREIGN KEY(id_user) REFERENCES usuario (id) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY(id_calcado) REFERENCES calcado (id) ON DELETE CASCADE ON UPDATE CASCADE
) engine = innoDB; 


CREATE DATABASE chat_app;

USE chat_app;

CREATE TABLE users (
  id INT AUTO_INCREMENT PRIMARY KEY,
  user_nome VARCHAR(255) NOT NULL,
  email_user VARCHAR(300) NOT NULL,
  foto_user VARCHAR(255),
  FOREIGN KEY (email_user) REFERENCES ProductEase.usuario(email) ON UPDATE CASCADE ON DELETE CASCADE
)engine = InnoDB;

CREATE TABLE messages (
  id INT AUTO_INCREMENT PRIMARY KEY,
  user VARCHAR(100) NOT NULL,
  id_user VARCHAR(300) NOT NULL,
  message TEXT NOT NULL,
  privateChatWith VARCHAR(300) DEFAULT NULL,
  timestamp DATETIME(3) DEFAULT CURRENT_TIMESTAMP(3),
  is_read BOOLEAN DEFAULT FALSE,
  FOREIGN KEY (id_user) REFERENCES users(email_user)
);

USE ProductEase;

DELIMITER //

CREATE TRIGGER after_insert_usuario
AFTER INSERT ON usuario
FOR EACH ROW
BEGIN
    -- Insere o e-mail e o nome do usuário na tabela users do banco de dados chat_app
    INSERT INTO chat_app.users (email_user, user_nome, foto_user)
    VALUES (NEW.email, NEW.name, NEW.profile_picture);
END//

DELIMITER ;

DELIMITER //

CREATE TRIGGER after_update_usuario
AFTER UPDATE ON usuario
FOR EACH ROW
BEGIN
    -- Atualiza o nome e a foto do usuário na tabela users do banco de dados chat_app quando o nome ou a foto são alterados em usuario
    UPDATE chat_app.users
    SET user_nome = NEW.name, foto_user = NEW.profile_picture
    WHERE email_user = NEW.email;
END//

DELIMITER ;


INSERT INTO usuario (name, RA, email, senha, funcao, profile_picture)
VALUES ('João Silva', '234567', 'joao.silva@email.com', '$2b$10$HR4nEboHKqvYe8R2D6FokeDDbyiTwVb1ZSzKrztaGzwjF3svVOni2' , 'Gerente de Vendas', '../../../assets/imagens/sem-foto.png'),
       ('admin','123456', 'admin@admin.com','$2b$10$HR4nEboHKqvYe8R2D6FokeDDbyiTwVb1ZSzKrztaGzwjF3svVOni2', 'Diretor', '../../../assets/imagens/sem-foto.png');


INSERT INTO material (id, nome, caminho, caminho2)
VALUES
(1, 'Material 1', 'caminho1.jpg', 'caminho1_thumb.jpg'),
(2, 'Material 2', 'caminho2.jpg', 'caminho2_thumb.jpg'),
(3, 'Material 3', 'caminho3.jpg', 'caminho3_thumb.jpg');

INSERT INTO tinta (id, nome, caminho)
VALUES
(1, 'Tinta 1', 'caminho_tinta1.jpg'),
(2, 'Tinta 2', 'caminho_tinta2.jpg'),
(3, 'Tinta 3', 'caminho_tinta3.jpg');

INSERT INTO tipo_tinta (id, nome)
VALUES
(1, 'Tipo de Tinta 1'),
(2, 'Tipo de Tinta 2'),
(3, 'Tipo de Tinta 3');

INSERT INTO adesivo (id, nome, caminho)
VALUES
(1, 'Adesivo 1', 'caminho_adesivo1.jpg'),
(2, 'Adesivo 2', 'caminho_adesivo2.jpg'),
(3, 'Adesivo 3', 'caminho_adesivo3.jpg');

INSERT INTO solado (id, nome)
VALUES
(1, 'Solado 1'),
(2, 'Solado 2'),
(3, 'Solado 3');

INSERT INTO cadarco (id, nome)
VALUES
(1, 'Cadarço 1'),
(2, 'Cadarço 2'),
(3, 'Cadarço 3');


INSERT INTO faq (name, comentario, avaliacao) VALUES 
('João', 'Ótimo atendimento!', 5),
('Maria', 'Muito satisfeita com o suporte.', 4),
('Pedro', 'Experiência razoável.', 3),
('Ana', 'Poderia ser melhor.', 2),
('Carlos', 'Insatisfeito com o serviço.', 1),
('Rafaela', 'Serviço excelente!', 5),
('Fernando', 'Bom suporte técnico.', 4),
('Juliana', 'Acho que poderia melhorar.', 3),
('Lucas', 'Não gostei muito do atendimento.', 2),
('Patrícia', 'Péssima experiência.', 1);


INSERT INTO calcado (id, nome, espe_linha, espacamento_da_costura, temp_equi, tam_costura, temp_sec, reg_equip, img_calcado, cor_solado, cor_logo_solado, cadarco, cor_malha, cor_lingua, cor_linha, cor_linha_lingua, cor_couro, cor_logo, cor_espuma_interna, cor_etiqueta, cor_bagulho_cardaco, id_tinta, id_material, id_cadarco, id_solado, id_adesivo, id_tip_tinta, data)
VALUES 
(1, 'Air Force 1`07 Branco', '10', '5', '120', '15', '5', '33', '../../../assets/uploads/airforce-branco.png', '#D3D3D3', '#D3D3D3', '#D3D3D3', '#D3D3D3', '#D3D3D3', '#D3D3D3', '#D3D3D3', '#D3D3D3', '#D3D3D3', '#D3D3D3', '#D3D3D3', '#D3D3D3', 1, 1, 2, 2, 1, 1, '2024-08-01'),
(2, 'Air Force 1`07 Dourado', '10', '5', '125', '16', '3', '33', '../../../assets/uploads/airforce-dourado.png', '#D3D3D3', '#D3D3D3', '#B8860B', '#B8860B', '#B8860B', '#B8860B', '#B8860B', '#B8860B', '#B8860B', '#B8860B', '#B8860B', '#B8860B', 2, 2, 1, 1, 2, 2, '2024-08-02'),
(3, 'airforce3', 'Linha 3', 'Espaçamento 3', '130', '17', '24', '1', '../../assets/uploads/Airforce.jpeg', '#4B0082', '#FFD700', '#7FFF00', '#FFD700', '#4B0082', '#00FFFF', '#7FFF00', '#00FFFF', '#4B0082', '#7FFF00', '#00FFFF', '#FFD700', 3, 1, 3, 2, 1, 2, '2024-08-03'),
(4, 'airforce4', 'Linha 4', 'Espaçamento 4', '135', '18', '26', '2', '../../assets/uploads/Airforce.jpeg', '#7FFF00', '#00FFFF', '#4B0082', '#7FFF00', '#FFD700', '#4B0082', '#00FFFF', '#7FFF00', '#FFD700', '#4B0082', '#00FFFF', '#4B0082', 1, 2, 1, 3, 2, 1, '2024-08-04');

INSERT INTO controle (data, id_user, id_calcado, conc0OrErro1)
VALUES 
    -- Dados para 10 meses atrás
    (CURDATE() - INTERVAL 10 MONTH, 2, FLOOR(RAND() * 4) + 1, FLOOR(RAND() * 2)),
    (CURDATE() - INTERVAL 10 MONTH, 2, FLOOR(RAND() * 4) + 1, FLOOR(RAND() * 2)),
    (CURDATE() - INTERVAL 10 MONTH, 2, FLOOR(RAND() * 4) + 1, FLOOR(RAND() * 2)),
    -- Dados para 9 meses atrás
    (CURDATE() - INTERVAL 9 MONTH, 2, FLOOR(RAND() * 4) + 1, FLOOR(RAND() * 2)),
    (CURDATE() - INTERVAL 9 MONTH, 2, FLOOR(RAND() * 4) + 1, FLOOR(RAND() * 2)),
    (CURDATE() - INTERVAL 9 MONTH, 2, FLOOR(RAND() * 4) + 1, FLOOR(RAND() * 2)),
    -- Dados para 8 meses atrás
    (CURDATE() - INTERVAL 8 MONTH, 2, FLOOR(RAND() * 4) + 1, FLOOR(RAND() * 2)),
    (CURDATE() - INTERVAL 8 MONTH, 2, FLOOR(RAND() * 4) + 1, FLOOR(RAND() * 2)),
    (CURDATE() - INTERVAL 8 MONTH, 2, FLOOR(RAND() * 4) + 1, FLOOR(RAND() * 2)),
    -- Dados para 7 meses atrás
    (CURDATE() - INTERVAL 7 MONTH, 2, FLOOR(RAND() * 4) + 1, FLOOR(RAND() * 2)),
    (CURDATE() - INTERVAL 7 MONTH, 2, FLOOR(RAND() * 4) + 1, FLOOR(RAND() * 2)),
    (CURDATE() - INTERVAL 7 MONTH, 2, FLOOR(RAND() * 4) + 1, FLOOR(RAND() * 2)),
    -- Dados para 6 meses atrás
    (CURDATE() - INTERVAL 6 MONTH, 2, FLOOR(RAND() * 4) + 1, FLOOR(RAND() * 2)),
    (CURDATE() - INTERVAL 6 MONTH, 2, FLOOR(RAND() * 4) + 1, FLOOR(RAND() * 2)),
    (CURDATE() - INTERVAL 6 MONTH, 2, FLOOR(RAND() * 4) + 1, FLOOR(RAND() * 2)),
    -- Dados para 5 meses atrás
    (CURDATE() - INTERVAL 5 MONTH, 2, FLOOR(RAND() * 4) + 1, FLOOR(RAND() * 2)),
    (CURDATE() - INTERVAL 5 MONTH, 2, FLOOR(RAND() * 4) + 1, FLOOR(RAND() * 2)),
    (CURDATE() - INTERVAL 5 MONTH, 2, FLOOR(RAND() * 4) + 1, FLOOR(RAND() * 2)),
    -- Dados para 4 meses atrás
    (CURDATE() - INTERVAL 4 MONTH, 2, FLOOR(RAND() * 4) + 1, FLOOR(RAND() * 2)),
    (CURDATE() - INTERVAL 4 MONTH, 2, FLOOR(RAND() * 4) + 1, FLOOR(RAND() * 2)),
    (CURDATE() - INTERVAL 4 MONTH, 2, FLOOR(RAND() * 4) + 1, FLOOR(RAND() * 2)),
    -- Dados para 3 meses atrás
    (CURDATE() - INTERVAL 3 MONTH, 2, FLOOR(RAND() * 4) + 1, FLOOR(RAND() * 2)),
    (CURDATE() - INTERVAL 3 MONTH, 2, FLOOR(RAND() * 4) + 1, FLOOR(RAND() * 2)),
    (CURDATE() - INTERVAL 3 MONTH, 2, FLOOR(RAND() * 4) + 1, FLOOR(RAND() * 2)),
    -- Dados para 2 meses atrás
    (CURDATE() - INTERVAL 2 MONTH, 2, FLOOR(RAND() * 4) + 1, FLOOR(RAND() * 2)),
    (CURDATE() - INTERVAL 2 MONTH, 2, FLOOR(RAND() * 4) + 1, FLOOR(RAND() * 2)),
    (CURDATE() - INTERVAL 2 MONTH, 2, FLOOR(RAND() * 4) + 1, FLOOR(RAND() * 2)),
    -- Dados para 1 mês atrás
    (CURDATE() - INTERVAL 1 MONTH, 2, FLOOR(RAND() * 4) + 1, FLOOR(RAND() * 2)),
    (CURDATE() - INTERVAL 1 MONTH, 2, FLOOR(RAND() * 4) + 1, FLOOR(RAND() * 2)),
    (CURDATE() - INTERVAL 1 MONTH, 2, FLOOR(RAND() * 4) + 1, FLOOR(RAND() * 2)),
    -- Dados para o mês atual
    (CURDATE(), 2, FLOOR(RAND() * 4) + 1, FLOOR(RAND() * 2)),
    (CURDATE(), 2, FLOOR(RAND() * 4) + 1, FLOOR(RAND() * 2)),
    (CURDATE(), 2, FLOOR(RAND() * 4) + 1, FLOOR(RAND() * 2));